Here are a few general brainstorming points on using TradingView for strategy signals (entries and exits) and then placing near-the-money option trades (one or two strikes away) through Alpaca (or any broker/API) without getting into code details:

Signal Generation in TradingView

TradingView is often used for charting and signal generation via custom scripts (Pine Script) or built-in indicators.
Once a buy/sell signal or alert condition is triggered in TradingView, you’d typically handle the “what” and “when” (e.g., “Buy when RSI crosses 30,” “Sell when RSI crosses 70,” etc.).
The next challenge is how to get those signals out of TradingView into an automated order flow.
Connecting TradingView Alerts to a Broker

By default, TradingView only has direct broker integration for a handful of brokers and asset classes (mostly equities or forex/CFDs). Options support is more limited.
However, TradingView allows you to send webhooks (HTTP POST messages) whenever an alert is triggered. This is your gateway to any broker or trading API.
You’d set up an intermediate service (your own server or a third-party platform that can receive TradingView webhooks) which then translates the alert into an API request for Alpaca (or whichever broker you’re using).
Options Trading with Alpaca

Alpaca has been rolling out options trading capabilities, but it’s not always as feature-complete as equities trading, and availability may vary depending on region, account type, or if you’re on a waitlist.
Double-check the status of Alpaca’s options API. Make sure that you can programmatically specify the option strike and the order type (e.g., buy to open a call one strike OTM, etc.).
If Alpaca doesn’t currently support the specific options workflow you want, you might need a different broker or a workaround solution.
Strike Selection Logic

Your idea is to pick “just one or two strikes out of the current price” (i.e., near-the-money). That implies you need logic that can map the underlying’s current price to the correct option contract.
For instance, if the stock is trading at $100, you might want to automatically buy the $101 or $99 strike call/put.
You’d need real-time or near-real-time data for that. TradingView does see the live (or delayed) underlying price, but it doesn’t automatically know which specific options exist or what their tickers are.
Typically, your bridging layer (the code/service that receives the TradingView alert) must:
Figure out the current underlying price (either from Alpaca or another data feed).
Decide which strikes are within your defined range.
Construct the correct symbol for that option contract (e.g., “AAPL_011923C150” or however the broker formats it).
Send that symbol, along with the quantity and order type, to the broker’s API.
Potential Latency Issues

Keep in mind that when TradingView triggers an alert, it may be slightly delayed if you’re on a non-premium plan or if your data feed is delayed. Then you have the additional time it takes to send a webhook, process it, and place an order.
With very short-term or volatile trades, you might see differences between the signal price on TradingView and the actual fill price for the option.
This might be acceptable for a swing or mid-term strategy, but for scalping or day trading extremely fast moves, these delays can be significant.
Paper Trading & Testing

Whenever you’re combining multiple services (TradingView + custom webhook + broker API + options strikes), it’s easy to introduce small errors (like choosing the wrong symbol or messing up the contract expiry date).
Use a paper trading or simulated environment first—if Alpaca (or your broker) supports paper options trades, that’s ideal. If not, you might need to simulate the logic carefully before going live.
Strategy Complexity

Buying or selling options near the underlying’s price might be a simple approach. But you’ll want to think about edge cases:
What if the underlying gaps up/down drastically, and your original “one or two strikes out” no longer aligns with your risk profile?
Do you have a fallback plan if liquidity is thin or the strike you want has a huge spread?
Are you going to do calls, puts, or combos (like vertical spreads)?
These details affect both your win/loss probability and your realized risk, so it’s good to define them upfront.
Alternative Workflow

If the direct TradingView→Alpaca route feels cumbersome for options specifically, you could:
Use TradingView for signals and alerts only (no direct bridging).
Manually (or automatically via a separate algorithmic script) query the market to find the best strike near the money.
Place trades through a direct integration with Alpaca or another broker.
Essentially, TradingView is the front-end for analysis, and the actual “engine” for trade execution is a separate piece of software that keeps track of the underlying price, picks the strike, and executes the order.
General Feasibility

In principle, yes, you can do something like “When TradingView signals a bullish setup on SPY, buy the near-the-money call option in Alpaca.”
The real question is the technical details: How do you map that bullish signal to an actual contract in real time? Does Alpaca’s API fully support specifying the exact strike, expiry, and type (call/put)? How do you handle data feed differences or delays?
As long as the broker’s options API is robust and you have a bridging mechanism (webhook or custom code), it’s absolutely doable. It just takes some careful planning and testing to ensure your signals map reliably to the correct option trades.
Bottom line:

Yes, you can definitely combine TradingView for trade alerts/strategy logic with a separate broker’s API (like Alpaca) for placing near-the-money options orders.
The biggest considerations are (1) making sure the broker supports the options workflow you need, (2) setting up a reliable bridging layer (webhook receiver or custom code) that can translate signals into actual option contracts, and (3) testing thoroughly to handle real-time price shifts and order fill logic.